input {
  file {
    # Use a generic path for the log file. Update this to your specific log file location.
    path => "/var/log/cas/*_service_*_idp_audit.log"
    start_position => "beginning"
    # The sincedb_path is set to /dev/null for testing. For production,
    # consider setting a relative path, e.g., "./.sincedb_cas-audit".
    sincedb_path => "/dev/null"
    codec => multiline {
      pattern => "Audit trail record BEGIN"
      negate => true
      what => "previous"
    }
  }
}

filter {
  # Remove ANSI escape codes and leading header line
  mutate {
    gsub => [
      "message", "\e\[(\d+;)*\d+m", "",
      "message", "^\s*20\d{2}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3} INFO.*Audit trail record BEGIN\n", ""
    ]
  }

  # Extract key fields
  grok {
    match => {
      "message" => "=============================================================\nWHEN: %{TIMESTAMP_ISO8601:timestamp}\nWHO: %{DATA:subject}\nWHAT: %{GREEDYDATA:what}\nACTION: %{WORD:action}\nCLIENT_IP: %{IP:ip_address}\nSERVER_IP: %{IP:server_ip}"
    }
  }

  # Convert timestamp to @timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }

  # Extract source and target protocol from file path
  dissect {
    mapping => {
      "[log][file][path]" => "/var/log/cas/%{source_protocol}_service_%{target_protocol}_idp_audit.log"
    }
  }
  mutate {
    add_field => {
      "connection_protocol" => "%{source_protocol}_to_%{target_protocol}"
    }
  }

  # GeoIP lookup
  geoip {
    source => "ip_address"
    target => "geoip"
    # Use a generic path for the GeoLite2 database. Logstash usually looks in its own 'data' directory.
    # Replace this with the actual path to your database file.
    database => "GeoLite2-Country.mmdb"
    fields => ["country_name", "country_code2"]
  }

  # Accounting structure
  ruby {
    code => '
      acct = {
        "timestamp" => event.get("timestamp"),
        "subject" => event.get("subject"),
        "operation" => event.get("action"),
        "ip_address" => event.get("ip_address"),
        "connection_protocol" => event.get("connection_protocol"),
        "source" => "cas"
      }
  
      if event.get("[geoip][country_name]") && event.get("[geoip][country_code2]")
        acct["geoip_country"] = event.get("[geoip][country_name]")
        acct["geoip_country_code"] = event.get("[geoip][country_code2]")
      end
  
      event.set("accounting", acct)
    '
  }
}

output {
  # Example output to console for verification
  # stdout {
  #   codec => rubydebug
  # }

  # Uncomment this block to output to an Elasticsearch cluster.
  # Replace the 'hosts' and 'index' settings as needed for your environment.
  elasticsearch {
    hosts => ["http://localhost:9200"] # Change this to your Elasticsearch host and port
    index => "cas-audit-%{+YYYY.MM.dd}" # The index name for your data
    # You can also add authentication if your Elasticsearch requires it
    # user => "elastic"
    # password => "changeme"
  }
}
